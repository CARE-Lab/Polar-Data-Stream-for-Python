def remove_str_start_end(s, start, end):
    return s[:start] + s[end + 1:]


def convert_complement_on_two_into_decimal(bits):
    return -int(bits[0]) << len(bits) | int(bits, 2)


def convert_complement_from_bytearray(bits):
    return int.from_bytes(bits, byteorder='little', signed=True)


def convert_complement_from_unsinged_bytearray(bits):
    return int.from_bytes(bits, byteorder='little', signed=False)


def calc_samples_by_deltas(sample0, deltas):
    samples = [sample0]
    sample = sample0
    for delta in deltas:
        sample += delta
        samples.append(sample)

    return samples


def decode_ppg(deltas: bytearray, delta_size: int):
    bits = ''.join(format(byte, '08b') for byte in deltas)
    bits_8 = [bits[x:x + 8] for x in range(0, len(bits), 8)]
    samples = []

    ppg0_deltas = []
    ppg1_deltas = []
    ppg2_deltas = []
    ambient0_deltas = []

    loop = len(deltas) - (len(deltas) % delta_size)
    for i in range(0, loop):
        if len(bits_8[i]) == 0:
            continue
        if len(bits_8[i]) != delta_size:
            lacked_len = delta_size - len(bits_8[i])
            sample = bits_8[i + 1][8 - lacked_len:] + bits_8[i]
            bits_8[i + 1] = remove_str_start_end(bits_8[i + 1], 8 - lacked_len, len(bits_8[i + 1]))
            samples.append(convert_complement_on_two_into_decimal(sample))
        else:
            samples.append(convert_complement_on_two_into_decimal(bits_8[i]))

    for i, sample in enumerate(samples):
        if i % 4 == 0:
            ppg0_deltas.append(sample)
        if i % 4 == 1:
            ppg1_deltas.append(sample)
        if i % 4 == 2:
            ppg2_deltas.append(sample)
        if i % 4 == 3:
            ambient0_deltas.append(sample)

    return ppg0_deltas, ppg1_deltas, ppg2_deltas, ambient0_deltas


if __name__ == '__main__':
    import matplotlib.pyplot as plt

    test_array = bytearray([0xFF, 0x00, 0x00])
    delta = bytearray(
        [0x42, 0x14, 0x53, 0xff, 0x1c, 0x1b, 0xfa, 0xef, 0x43, 0xfb, 0x21, 0xf4, 0xce, 0x21, 0x02, 0xf4, 0x43, 0x4b,
         0x48, 0x0f, 0x0a, 0x24, 0x26, 0xa8, 0x40, 0x7f, 0x0a, 0x05, 0xa4, 0x3f, 0xc2, 0xf7, 0x7e, 0xa8, 0x60, 0xc4,
         0x06, 0x34, 0xf4, 0x20, 0xc2, 0x15, 0x38, 0x34, 0x61, 0xc9, 0xf9, 0x36, 0x9c, 0x80, 0x7e, 0xee, 0x37, 0x94,
         0x30, 0x81, 0xfc, 0x2c, 0xe8, 0x10, 0xc8, 0x07, 0x42, 0x20, 0x01, 0x87, 0xe8, 0x63, 0x2c, 0x71, 0x41, 0x1e,
         0x58, 0xe8, 0xc0, 0xc7, 0xfe, 0x49, 0x00, 0xf1, 0x45, 0xff, 0x4d, 0x80, 0x80, 0x87, 0xf2, 0x42, 0x28, 0x90,
         0x87, 0x10, 0x13, 0xf4, 0x21, 0x04, 0xf6, 0x71, 0xc0, 0x50, 0x84, 0xfa, 0xf0, 0x9b, 0x4f, 0xff, 0x04, 0xf5,
         0x1b, 0x70, 0xfc, 0x02, 0x43, 0xf3, 0xee, 0xb2, 0xf7, 0xc5, 0x1f, 0xaf, 0x38, 0x08, 0x9d, 0x83, 0xde, 0xf7,
         0x02, 0x54, 0x47, 0xbe, 0xf2, 0xe7, 0xb2, 0xe7, 0xad, 0x34, 0x12, 0xd7, 0x8f, 0x8f, 0x3b, 0xfc, 0x30, 0x58,
         0xf0, 0x3c, 0x0d, 0xf8, 0xe3, 0x2e, 0xc0, 0xed, 0xd5, 0xaf, 0x1f, 0x80, 0x07, 0x00, 0x40, 0xc0, 0x7c, 0x07,
         0x3e, 0x44, 0x30, 0x01, 0xf0, 0x2e, 0x44, 0xb0, 0xc1, 0x0e, 0x1f, 0xa4, 0xc1, 0x80, 0xfe, 0x2e, 0xb0, 0xef,
         0x05, 0xfc, 0xef, 0x6b, 0xaf, 0x3c, 0x08, 0x1d, 0x90, 0x40, 0x02, 0xfc, 0xfb, 0x33, 0x9f, 0xbf, 0x0a, 0x2e,
         0xb4, 0x20, 0x40, 0xf8])
    delta_size = 8

    print(convert_complement_from_bytearray(test_array[:3]))

    ppg0_samples, ppg1_samples, ppg2_samples, ambient0_samples = decode_ppg(delta, delta_size)

    horizon = range(len(ppg0_samples[2:]))

    fig, ax = plt.subplots()
    ax.plot(horizon, ppg0_samples[2:], "r")
    ax.plot(horizon, ppg1_samples[2:], "g")
    ax.plot(horizon, ppg2_samples[2:], "b")
    ax.plot(horizon, ambient0_samples[2:], "gray")

    plt.show()
